class Package {
    private weight: number;
    private distance: number;

    constructor(weight: number, distance: number) {
        this.weight = weight;
        this.distance = distance;
    }

    getWeight() {
        return this.weight
    }
    setWeight(weight : number) {
        this.weight = weight
    }

    getDistance() {
        return this.distance
    }
    setDistance(distance : number) {
        this.distance = distance
    }
}


class DiscountCalculator {
    calcDiscount(customerType, base): number {
        switch ( customerType) {
            case "VIP" : return base *= 0.8
            case "Business": return base *= 0.9 
            default : return base
        } 
        
    }
}

class DeliveryServiceCalculator {
    calculateDeliveryPrice(packages: Package[], customerType: string, urgent: boolean): number {
        let total = 0;
        const discountCalc = new DiscountCalculator()
        for (const pkg of packages) {
            if (pkg.getWeight() < 0) {
                console.log("Invalid weight!");
                return -1;
            }

            let base = pkg.getDistance() * 0.1;
            if (pkg.getWeight() > 10) {
                base += 5;
            } else if (pkg.getWeight() > 5) {
                base += 3;
            }

            if (urgent) {
                base *= 1.5;
            }

            base = discountCalc.calcDiscount(customerType, base)
            

            total += base
        }

        if (packages.length > 3) {
            total *= 0.95;
        }

        return total;
    }

    
}

class PricePrinter {
    printInvoice(packages: Package[], customerType: string): void {
        const deliveryServiceCalculator = new DeliveryServiceCalculator()
        const price = deliveryServiceCalculator.calculateDeliveryPrice(packages, customerType, false);
        console.log(`Total: ${price}`);
        if (price > 100) {
            console.log("Apply special discount next time!");
        }
    }
}